#!/usr/bin/env node

const fs = require('fs');
const Scan = require('../models/scan');
const Home = require('../models/homeFolder');
const Scratch = require('../models/scratchFolder');
const Read = require('../models/readsFolder');
const moment = require('moment');

if (process.argv.length < 3) {
    console.error('Usage: import <file>');
    return process.exit(-1)
}


fs.readFile(process.argv[2], function read(err, data) {
    if (err) {
        console.error(err);
        return process.exit(-1);
    }

    const imported = JSON.parse(data);

    if (!imported) {
        console.error('failed to parse');
        return process.exit(-1);
    }

    const dateHuman = moment(imported.scan.date).format('MMMM Do YYYY, h:mm:ss a');

    // Scan.count({dateHuman: dateHuman})
    Scan.filter({dateHuman: dateHuman})
    // .execute()
        .then(count => {

            if (count.length < 1) {
                new Scan({date: imported.scan.date})
                    .save()
                    .then(savedScan => {

                        console.log(savedScan.dateHuman, dateHuman, savedScan.dateHuman === dateHuman);
                        // console.log(new Date(imported.scan.date, savedScan.date, imported.scan.date === savedScan.date,);
                        return Promise.all(
                            [
                                Promise.all(
                                    imported.home.map(h => {
                                        h.scanID = savedScan.id;
                                        return new Home(h).save();
                                    })
                                ),

                                Promise.all(
                                    imported.scratch.map(h => {
                                        h.scanID = savedScan.id;
                                        return new Scratch(h).save();
                                    })
                                ),

                                Promise.all(
                                    imported.reads.map(h => {
                                        h.scanID = savedScan.id;
                                        return new Read(h).save();
                                    })
                                )
                            ]
                        )

                    })
                    .then(savedModels => {
                        console.log('DONE!');
                        process.exit(0);
                    })
                    .catch(err => {
                        console.error(err);
                        Scan.filter({dateHuman: dateHuman}).deleteAll()
                            .then(() => {
                                console.log('cleaned up from error');
                                process.exit(-1);
                            })
                            .catch(err => {
                                console.log('failed to clean up from error');
                                console.error(err);
                                process.exit(-1);
                            })


                    })

            } else {
                console.error('A scan with this data has already been imported');
                process.exit(-1);
            }

        })
        .catch(err => {
            console.error(err);
            process.exit(-1);
        })


});

// require('./')(process.argv[2], function (err, size) {
//     if (err) {
//         console.error(err)
//         return process.exit(-1)
//     }
//     console.log(size, process.argv[2])
// })