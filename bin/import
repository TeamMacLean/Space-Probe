#!/usr/bin/env node

const path = require('path');
const fs = require('fs');
const Scan = require(path.join(__dirname, '../models/scan'));
const Location = require(path.join(__dirname, '../models/location'));
const Folder = require(path.join(__dirname, '../models/folder'));
const moment = require('moment');

if (process.argv.length < 3) {
    console.error('Usage: import <file>');
    return process.exit(-1)
}


fs.readFile(process.argv[2], function read(err, data) {
    if (err) {
        console.error(err);
        return process.exit(-1);
    }

    const imported = JSON.parse(data);

    if (!imported) {
        console.error('failed to parse');
        return process.exit(-1);
    }

    const dateHuman = moment(imported.scan.date).format('MMMM Do YYYY, h:mm:ss a');

    // Scan.count({dateHuman: dateHuman})
    Scan.filter({dateHuman: dateHuman})
    // .execute()
        .then(count => {

            if (count.length < 1) {
                new Scan({date: imported.scan.date})
                    .save()
                    .then(savedScan => {

                        return new Promise((good, bad) => {

                            imported.locations.map(location => {
                                console.log('location', location.name);
                                new Location({
                                    name: location.name,
                                    scanID: savedScan.id
                                }).save()
                                    .then(savedLocation => {

                                        Promise.all(
                                            location.folders.map(folder => {
                                                console.log('folder', folder.name);
                                                return new Folder({
                                                    name: folder.name,
                                                    locationID: savedLocation.id,
                                                    size: folder.size,
                                                    xfiles: folder.xfiles ? folder.xfiles : 0
                                                }).save()
                                            })
                                        )
                                            .then(() => good())
                                            .catch(err => bad(err));
                                    })
                                    .catch(err => bad(err));


                            })
                        })
                    })
                    .then(savedModels => {
                        console.log('DONE!');
                        process.exit(0);
                    })
                    .catch(err => {
                        console.error(err);
                        Scan.filter({dateHuman: dateHuman})
                            .then((duplicates) => {
                                return Promise.all(
                                    duplicates.map(d => {
                                        return d.deleteAll()
                                    })
                                )
                            })
                            .then(() => {
                                console.log('cleaned up from error');
                                process.exit(-1);
                            })
                            .catch(err => {
                                console.log('failed to clean up from error');
                                console.error(err);
                                process.exit(-1);
                            })


                    })

            } else {
                console.error('A scan with this data has already been imported');
                process.exit(-1);
            }

        })
        .catch(err => {
            console.error(err);
            process.exit(-1);
        })


});
