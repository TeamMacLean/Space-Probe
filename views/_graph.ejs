<div class="container">
    <canvas id="myChart"></canvas>
    <button onClick="toggleScale();" class="btn btn-primary btn-sm">Toggle Scale</button>
</div>

<style>
    canvas {
        -moz-user-select: none;
        -webkit-user-select: none;
        -ms-user-select: none;
    }
</style>

<script src="/js/Chart.min.js"></script>
<script src="/js/moment.min.js"></script>

<script>

    var instances = <%- JSON.stringify(instances) %>;
    instances = instances.reverse();

    /**
     * @return {number}
     */
    function BytesToTB(bytes) {
        return bytes / Math.pow(1024, 4)
    }

    /**
     * @return {number}
     */
    function TBToBytes(bytes) {
        return bytes * Math.pow(1024, 4)
    }

    function filesize(bytes, other) {
        const si = other | true;
        const thresh = si ? 1000 : 1024;
        if (Math.abs(bytes) < thresh) {
            return bytes + ' B';
        }
        const units = si
            ? ['kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']
            : ['KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB'];
        let u = -1;
        do {
            bytes /= thresh;
            ++u;
        } while (Math.abs(bytes) >= thresh && u < units.length - 1);
        return bytes.toFixed(1) + ' ' + units[u];
    }

    var ctx = document.getElementById("myChart").getContext('2d');
    var myChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: instances.map(i => moment(new Date(i.location.scan.date)).format('DD/MM/YY, HH:mm')),
            datasets: [{
                label: 'Size (TB)',
                data: instances.map(i => BytesToTB(i.size)),
                backgroundColor: [
                    'rgba(233,85,103, 0.2)',
                ],
                borderColor: [
                    'rgba(233,85,103, 1)',
                ],
                borderWidth: 1
            }]
        },
        options: {
            tooltips: {
                callbacks: {
                    label: function (tooltipItem, data) {
                        return filesize(TBToBytes(tooltipItem.yLabel));
                    }
                }
            },
            responsive: true,
            scales: {
                xAxes: [{
                    display: true,
                    scaleLabel: {
                        display: true,
                        labelString: 'Date (DD/MM/YY, HH:mm)'
                    }
                }],
                yAxes: [{
                    scaleLabel: {
                        display: true,
                        labelString: 'Size (TB)'
                    },
                    ticks: {
                        stepSize: 1,
                        max: 3,
                        beginAtZero: true
                    }
                }]
            }
        }
    });

    var resetScale = myChart.config.options.scales.yAxes[0].ticks.max;
    var resetStepSize = myChart.config.options.scales.yAxes[0].ticks.stepSize;

    function toggleScale() {


        if (myChart.config.options.scales.yAxes[0].ticks.max === resetScale) {
            myChart.config.options.scales.yAxes[0].ticks.max = undefined;
            myChart.config.options.scales.yAxes[0].ticks.stepSize = undefined;
        } else {
            myChart.config.options.scales.yAxes[0].ticks.max = resetScale;
            myChart.config.options.scales.yAxes[0].ticks.stepSize = resetStepSize;
        }

        myChart.update();

    }
</script>