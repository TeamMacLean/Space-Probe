<% function filesize(bytes, other) {
    const si = other | true;
    const thresh = si ? 1000 : 1024;
    if (Math.abs(bytes) < thresh) {
        return bytes + ' B';
    }
    const units = si
            ? ['kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']
            : ['KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB'];
    let u = -1;
    do {
        bytes /= thresh;
        ++u;
    } while (Math.abs(bytes) >= thresh && u < units.length - 1);
    return bytes.toFixed(1) + ' ' + units[u];
} %>
<% const total = location.folders.reduce((total, current) => {
    return total + current.size
}, 0)
%>


<h2 class="center mt-5 mb-2"><a href="/<%- location.name %>"><%- location.name %></a> <%- filesize(total) %></h2>
<table class="table" data-sortable id="table-<%- location.name %>">
    <thead>
    <tr>
        <th>Name</th>
        <th>Size</th>
        <th>Change</th>
        <th>xFiles</th>
    </tr>
    </thead>
    <tbody>
    <% location.folders.sort(function (a, b) {
        return b.size - a.size
    }).map((folder)=>{ %>
    <tr>
        <td><a href="/<%- location.name %>/<%- folder.name %>"><%- folder.name %></a>
        </td>
        <td data-value="<%- folder.size %>"><%- filesize(folder.size) %></td>
        <td data-value="<%- folder.sizeDifferenceHuman ? folder.sizeDifferenceHuman : '0' %>">
            <%- folder.sizeDifferenceHuman ? folder.sizeDifferenceHuman : '0' %>
        </td>
        <td data-value="<%- folder.xfiles %>">
            <%- folder.xfiles && folder.xfiles !== -1 ? folder.xfiles : '0' %>
        </td>
    </tr>
    <% }) %>
    </tbody>
</table>

